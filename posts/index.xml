<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ByteRest</title>
    <link>https://byterest.com/posts/</link>
    <description>Recent content in Posts on ByteRest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 29 Apr 2020 11:19:42 +0800</lastBuildDate>
    
	<atom:link href="https://byterest.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ubuntu 18.04 搭建 Flask 程序</title>
      <link>https://byterest.com/2020/flask-deploy/</link>
      <pubDate>Wed, 29 Apr 2020 11:19:42 +0800</pubDate>
      
      <guid>https://byterest.com/2020/flask-deploy/</guid>
      <description>首先我们得有一个 Flask 得程序，你可以用本网站开源的 Flask 博客，TextsMate, 其次是一个服务器，我选择的是 VULTR, 点击这个链接进行购买，同时它是支持支付宝的。
推荐选择 Ubuntu 18.04，在我们 VULTR 安装好系统之后，我们就要进行一些软件的安装，我们需要安装 Python 3， 然后就是 Python 官方的虚拟环境 venv。还有一个最重要的是 git。
为 LINUX 添加 sudo 用户
sudo adduser linus sudo adduser linus sudo su linus 将这行代码一个一个复制进命令行即可，第一行代码会让我们为用户添加密码。
进入 linus 用户之后，我们就把项目给 clone 下来。
git clone https://github.com/luowanshun/textsmate.git 进入 textsmate 文件夹，在该文件夹下创建一个虚拟环境。
python3 -m venv textsenv 接下来就是安装我们的依赖，你可以一个一个的安装缺省的包，或者使用 requirements.txt 进行快速安装。
安装成功以后，就是安装 uwsgi。 注意一定要用 pip3 安装包， Ubuntu 18.04 还有一个 Python 2 。
pip3 install uwsgi 查看 uwsgi 是否成功</description>
    </item>
    
    <item>
      <title>为网站开启 HTTPS</title>
      <link>https://byterest.com/2020/how-to-make-your-site-secure/</link>
      <pubDate>Tue, 28 Apr 2020 22:36:06 +0800</pubDate>
      
      <guid>https://byterest.com/2020/how-to-make-your-site-secure/</guid>
      <description>支持 HTTPS 的条件为：拥有一个域名,而且要做对应的 DNS 解析
操作系统: Ubuntu 18.04
命令为
$ sudo add-apt-repository ppa:certbot/certbot $ sudo apt install python-certbot-nginx $ sudo nano /etc/nginx/sites-available/example.com 如果没有找到 add-apt-repository 命令的话，你需要先进行这一步，然后回到上一步重新运行。
$ sudo apt-get install software-properties-common 修改 NGINX 配置文件中的 server_name 值为 www.example.com example.com
重启 NGINX
$ sudo nginx -t $ sudo nginx -s reload 获取 SSL 证书
$ sudo certbot --nginx -d example.com -d www.example.com 修改 example 为自己的域名,成功之后会询问你是否由 HTTP 重定向到 HTTPS,一般选确定。
$ sudo certbot renew --dry-run 该命令可以让 HTTPS 自动更新。</description>
    </item>
    
    <item>
      <title>使用 CSS variables 为网站添加 Dark Mode</title>
      <link>https://byterest.com/2020/dark-mode-for-website/</link>
      <pubDate>Thu, 23 Apr 2020 10:12:12 +0800</pubDate>
      
      <guid>https://byterest.com/2020/dark-mode-for-website/</guid>
      <description>我们可以使用 CSS Variables 实现不刷新更改网页主题。
下面是 MDN 上对 CSS Variables 的介绍
 Custom properties (sometimes referred to as CSS variables or cascading variables) are entities defined by CSS authors that contain specific values to be reused throughout a document. They are set using custom property notation (e.g., &amp;ndash;main-color: black;) and are accessed using the var() function (e.g., color: var(&amp;ndash;main-color);)
 接下来，我们定义一个默认主题，为了让配色可以全局访问，需要在 :root 下
:root { --primary-color: #302AE6; --secondary-color: #536390; --font-color: #171717; --bg-color: #fff; --heading-color: #292922; --hover-color:#42b983; --time-color:#ccc; } 接下来再添加一个暗色主题</description>
    </item>
    
  </channel>
</rss>